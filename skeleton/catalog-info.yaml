%SKELETON
{% set domainNameNormalized = values.domain | replace("domain:", "") | replace(r/ |_/g, "-") | lower %}
{% set dataProductNameNormalized = values.dataproduct.split(".")[1] | replace(r/ |_/g, "-") | lower %}
{% set componentNameNormalized = values.name | replace(r/ |_/g, "-") | lower %}
{% set dataProductMajorVersion = values.identifier.split(".")[2] %}
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: ${{ values.identifier }}
  description: ${{ values.description | dump }}
  annotations:
    gitlab.com/project-slug: ${{ values.owner + "/" + values.repo }}
    backstage.io/techdocs-ref: dir:.
  tags:
    - azure
    - adlsgen2
    - outputport
spec:
  type: outputport
  lifecycle: experimental
  owner: ${{ values.developmentGroup }}
  system: ${{ values.dataproduct | dump }}
  domain: ${{ values.domain | dump }}
  mesh:
    name: ${{ values.name | dump }}
    fullyQualifiedName: ${{ values.domainName }} - ${{ values.dataproductName }} - version ${{ dataProductMajorVersion }} - ${{ values.name }}
    description: ${{ values.description | dump }}
    kind: outputport
    version: ${{ dataProductMajorVersion + ".0.0" }}
    infrastructureTemplateId: ${{ values.infrastructureTemplateId }}
    useCaseTemplateId: ${{ values.useCaseTemplateId }}
    dependsOn:
      - ${{ values.dependsOn }}
    platform: Azure
    technology: ADLSGen2
    outputPortType: Files
    creationDate: ${{ values.creationDate }}
    startDate: ${{ values.creationDate }}
    processDescription: ${{ parameters.processDescription | dump }}
    dataContract:
      schema: {% if values.schemaColumns | length > 0 %}
      {%- for column in values.schemaColumns %}
        {%- set primitiveType = column.arrayDataType if column.dataType == "ARRAY" else column.dataType %}
        - name: ${{ column.name }}
          dataType: ${{ column.dataType }}
      {%- if column.description %}
          description: ${{ column.description }}
      {%- endif %}
      {%- if column.constraint and column.constraint != "(no constraint)" %}
          constraint: ${{ column.constraint }}
      {%- endif %}
      {%- if primitiveType in ["TEXT", "VARCHAR", "CHAR"] and column.dataLength %}
          dataLength: ${{ column.dataLength }}
      {%- endif %}
      {%- if primitiveType == "DECIMAL" and column.precision %}
          precision: ${{ column.precision }}
      {%- endif %}
      {%- if primitiveType == "DECIMAL" and column.scale %}
          scale: ${{ column.scale }}
      {%- endif %}
      {%- if column.dataType == "ARRAY" and column.arrayDataType %}
          arrayDataType: ${{ column.arrayDataType }}
      {%- endif %}
          tags: {% if column.businessTerms | length > 0 %}{% for i in column.businessTerms %}
            - tagFQN: ${{ i }}
              source: Glossary
              labelType: Manual
              state: Confirmed
          {% endfor %}{% else %}[]{% endif %}
      {% endfor %}{% else %}[]{% endif %}
      termsAndConditions: ${{ parameters.termsAndConditions | dump }}
      endpoint: ${{ parameters.endpoint | dump }}
      SLA:
        intervalOfChange: ${{ parameters.intervalOfChange }}
        timeliness: ${{ parameters.timeliness }}
        upTime: ${{ parameters.upTime }}
    dataSharingAgreement:
      purpose: ${{ parameters.purpose | dump }}
      billing: ${{ parameters.billing | dump }}
      security: ${{ parameters.security | dump }}
      intendedUsage: ${{ parameters.intendedUsage | dump }}
      limitations: ${{ parameters.limitations | dump }}
      lifeCycle: ${{ parameters.lifeCycle | dump }}
      confidentiality: ${{ parameters.confidentiality | dump }}
    tags: {% if parameters.tags | length > 0 %}{% for i in parameters.tags %}
      - tagFQN: ${{ i }}
        source: Glossary
        labelType: Manual
        state: Confirmed
    {% endfor %}{% else %}[]{% endif %}
    sampleData: {}
    semanticLinking: []
    specific:
      container: ${{ values.containerName }}
      path: {% if values.autogeneratePath %}
        ${{ values.prefixPath if values.prefixPath else "" }}data-products/${{ domainNameNormalized }}/${{ dataProductNameNormalized }}/${{ dataProductMajorVersion }}/${{ componentNameNormalized }}
      {% else %}
        ${{ values.folderPath }}
      {% endif %}
      fileFormat: ${{ values.fileFormat if values.fileFormat != "Other" else values.otherFileFormat }}
