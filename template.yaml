apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: azure-outputport-adlsgen2-template.1
  title: ADLS Gen2 Output Port
  description: This template can be used to create an Output Port based on a directory located on an ADLS Gen2 Storage Account
  mesh:
    icon: https://cdn-images-1.medium.com/v2/resize:fit:914/1*iYJgfYgxDWBcfWjl1twsag.png
  tags:
    - azure
    - adlsgen2
    - outputport
  annotations:
    backstage.io/techdocs-ref: dir:.
spec:
  generates: componenttype:default/outputport
  owner: agilelab
  type: outputport
  parameters:
    - title: Component metadata
      description: Basic information for this component. You can define further information about the Output Port after creation using the Editor Wizard
      required:
        - name
        - domain
        - dataproduct
        - description
      properties:
        name:
          title: Name
          type: string
          description: Required name used for display purposes
          ui:field: EntityNamePicker
          default: ADLS Gen2 Output Port
          ui:options:
            allowArbitraryValues: true
        fullyQualifiedName:
          title: Fully Qualified Name
          type: string
          description: ADLS-Gen2-Output-Port.FQN
        description:
          title: Description
          type: string
          description: Help others understand what this Output Port is for
          default: Output Port that exposes an ADLS Gen2 directory data of this Data Product to users and other data products.
        domain:
          title: Domain
          type: string
          description: Domain of the Data Product this Output Port belongs to
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - Domain
        dataproduct:
          title: Data Product
          type: string
          description: Data Product this Output Port belongs to
          ui:field: EntityPicker
          ui:filter:
            - fieldName: domain
              entityPath: spec.domain
          ui:options:
            allowArbitraryValues: false
            allowedKinds:
              - System
        identifier:
          title: Identifier
          type: string
          description: A unique identifier for the entity inside the domain. It will not be editable after creation and is expected to be a string that is sequences of [a-zA-Z] separated by any of [-_]
          ui:field: ComponentIdentifierPicker
          ui:options:
            allowArbitraryValues: false
        developmentGroup:
          title: Development Group
          type: string
          description: Data Product development group
          ui:field: EntitySelectionPicker
          ui:fieldName: dataproduct
          ui:property: spec.owner
          ui:options:
            allowArbitraryValues: false
        dependsOn:
          title: Depends on
          type: array
          default: []
          items:
            type: string
            ui:field: EntityRelationsPicker
            ui:fieldName: dataproduct
            relation: hasPart
          description: An Output Port could depend on other Output Ports or Storage Areas

    - title: Data contract schema
      description: |-
        Definition of the columns of the table. Primitive data types supported. 
        
        You can leave this empty and edit it after creation using the Editor Wizard.
      properties:
        schemaDefinition:
          type: object
          ui:options:
            displayTitle: false
          properties:
            schemaColumns:
              title: Column Definitions
              type: array
              ui:ArrayFieldTemplate: ArrayTableTemplate
              items:
                type: object
                ui:ObjectFieldTemplate: TableRowTemplate
                required:
                  - name
                  - dataType
                properties:
                  name:
                    type: string
                    title: Name
                  description:
                    type: string
                    title: Description
                  dataType:
                    type: string
                    default: INT
                    title: Data Type
                    enum:
                      - TINYINT
                      - SMALLINT
                      - INT
                      - BIGINT
                      - DOUBLE
                      - DECIMAL
                      - TIMESTAMP
                      - DATE
                      - STRING
                      - TEXT
                      - CHAR
                      - VARCHAR
                      - BOOLEAN
                      - ARRAY
                  constraint:
                    type: string
                    title: Constraint
                    default: (no constraint)
                    enum:
                      - PRIMARY_KEY
                      - NOT_NULL
                      - UNIQUE
                      - (no constraint)
                allOf:
                  - if:
                      properties:
                        dataType:
                          const: ARRAY
                    then:
                      required:
                        - arrayDataType
                      properties:
                        arrayDataType:
                          title: Array Data Type
                          description: Data type of the array elements
                          type: string
                          default: INT
                          enum:
                            - TINYINT
                            - SMALLINT
                            - INT
                            - BIGINT
                            - DOUBLE
                            - DECIMAL
                            - TIMESTAMP
                            - DATE
                            - STRING
                            - TEXT
                            - CHAR
                            - VARCHAR
                            - BOOLEAN
                            - ARRAY
                      allOf:
                        - if:
                            properties:
                              arrayDataType:
                                oneOf:
                                  - const: TEXT
                                  - const: VARCHAR
                                  - const: CHAR
                          then:
                            properties:
                              dataLength:
                                title: Column Length
                                type: integer
                                description: Maximum length of column row
                                default: 65535
                            required:
                              - dataLength
                        - if:
                            properties:
                              arrayDataType:
                                oneOf:
                                  - const: DECIMAL
                          then:
                            properties:
                              precision:
                                title: Precision
                                type: integer
                                description: Precision of the numeric data type
                                minimum: 1
                                maximum: 38
                                default: 38
                              scale:
                                title: Scale
                                type: integer
                                description: Scale of the numeric data type; cannot be greater than precision minus 1
                                minimum: 0
                                maximum: 37
                                default: 0
                            required:
                              - precision
                              - scale
                  - if:
                      properties:
                        dataType:
                          oneOf:
                            - const: TEXT
                            - const: VARCHAR
                            - const: CHAR
                    then:
                      properties:
                        dataLength:
                          title: Column Length
                          type: integer
                          description: Maximum length of column row
                          default: 65535
                      required:
                        - dataLength
                  - if:
                      properties:
                        dataType:
                          oneOf:
                            - const: DECIMAL
                    then:
                      properties:
                        precision:
                          title: Precision
                          type: integer
                          description: Precision of the numeric data type
                          minimum: 1
                          maximum: 38
                          default: 38
                        scale:
                          title: Scale
                          type: integer
                          description: Scale of the numeric data type; cannot be greater than precision minus 1
                          minimum: 0
                          maximum: 37
                          default: 0
                      required:
                        - precision
                        - scale
                  - if: true
                    then:
                      properties:
                        businessTerms:
                          title: Business Terms
                          type: array
                          description: Multiple selection for fixed tags
                          uniqueItems: true
                          ui:style:
                            minWidth: 400
                          items:
                            type: string
                            enum:
                              - Raw
                              - Derived
                              - Metadata
                              - Identifier
                              - Dimension
                              - Fact

    - title: Provide ADLS Gen2 directory information
      description: |- 
        This template will expose a folder inside an existing ADLS Gen2 Storage Account, creating the folder if not existent
        
        You can leave these values empty for the meantime, but in order for the deployment to be successful, they must be filled out
      properties:
        storageAccount:
          title: Storage Account
          type: string
          description: Existing Storage Account name where the directory will be located
          ui:field: RegexPicker
          validation:
            errorMessage: The field should only contain lowercase letters and numbers. Name
              must be between 3 and 24 characters.
            regularExpression: ^[a-z0-9]{3,24}$
          ui:options:
            allowArbitraryValues: true
        containerName:
          title: Container name
          type: string
          description: Name of the container. This container must exist when deploying this component
          minLength: 3
          maxLength: 63
          ui:field: EntityNamePicker
          pattern: ^[a-z0-9]+(?:-[a-z0-9]+)*$
          ui:help: The field should only contain lowercase letters, numbers, and hyphens,
            and must begin with a letter or a number. Each hyphen must be
            preceded and followed by a non-hyphen character. The name must
            also be between 3 and 63 characters long.
          ui:options:
            allowArbitraryValues: true
        folder:
          title: Folder specification
          type: object
          required:
            - autogeneratePath
          properties:
            autogeneratePath:
              title: Generate folder path automatically
              type: boolean
              default: true
          dependencies:
            autogeneratePath:
              oneOf:
                - properties:
                    autogeneratePath:
                      const: true
                    prefixPath:
                      title: Prefix path
                      type: string
                      description: "Optional: Specify a prefix path to prepended the autogenerated path."
                      pattern: /$
                      ui:help: If provided, it must end with a "/" character
                - required:
                    - folderPath
                  properties:
                    autogeneratePath:
                      const: false
                    folderPath:
                      title: Folder path
                      type: string
                      description: Path inside the container for the directory to be created and exposed.
                      ui:field: RegexPicker
                      pattern: ^[^/]+(?:/[^/]+)*$
                      ui:help: The path must not start or end with a "/" character
                      ui:options:
                        allowArbitraryValues: true
        format:
          type: object
          ui:options:
            displayTitle: false
          ui:ObjectFieldTemplate: HorizontalTemplate
          properties:
            fileFormat:
              title: Files format
              type: string
              description: Select the file format of data stored inside the Output Port directory. This will be shown to the end-user
              enum:
                - CSV
                - Parquet
                - DeltaLake
                - Iceberg
                - Other
          allOf:
            - if:
                properties:
                  fileFormat:
                    const: Other
              then:
                required:
                  - otherFileFormat
                properties:
                  otherFileFormat:
                    title: Other (please specify)
                    type: string
                    description: Specify the file format of the files contained in the directory

  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        targetPath: '.'
        values:
          name: '${{ parameters.name }}'
          fullyQualifiedName: '${{ parameters.fullyQualifiedName }}'
          description: '${{ parameters.description }}'
          domain: '${{ parameters.domain }}'
          dataproduct: '${{ parameters.dataproduct }}'
          identifier: '${{ parameters.identifier }}'
          developmentGroup: '${{ parameters.developmentGroup }}'
          dependsOn: '${{ parameters.dependsOn }}'
          schemaColumns: '${{ parameters.schemaDefinition.schemaColumns }}'
          storageAccount: '${{ parameters.storageAccount }}'
          containerName: '${{ parameters.containerName }}'
          autogeneratePath: '${{ parameters.folder.autogeneratePath }}'
          prefixPath: '${{ parameters.folder.prefixPath }}'
          folderPath: '${{ parameters.folder.folderPath }}'
          fileFormat: '${{ parameters.format.fileFormat }}'
          otherFileFormat: '${{ parameters.format.otherFileFormat }}'
          useCaseTemplateId: urn:dmb:utm:azure-outputport-adlsgen2-template:0.0.0
          infrastructureTemplateId: urn:dmb:itm:azure-outputport-adlsgen2-provisioner:0
          repoUrl: &destination 'gitlab.com?owner=AgileDMBSandbox${{orgname}}%2Fmesh.repository%2F${{ parameters.domain | replace(r/domain:| |-/, "") }}%2F${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}&repo=${{ parameters.name.split(" ") | join("") | lower }}'
          owner: 'AgileDMBSandbox${{orgname}}%2Fmesh.repository/${{ parameters.domain | replace(r/domain:| |-/, "") }}/${{ parameters.dataproduct.split(".")[1] | replace(r/ |-/g, "") }}'
          repo: '${{ parameters.name.split(" ") | join("") | lower }}'
          displayName: '${{ parameters.displayName }}'
          artifact_id: '${{ parameters.name }}'
          useCaseTemplateVersion: 0.0.0

    - id: publish
      name: Publish
      action: witboostMeshComponent:publish:gitlab
      input:
        allowedHosts: ['gitlab.com']
        description: 'This is ${{ parameters.name }}'
        repoUrl: *destination
        rootDirectory: '.'
        dataproduct: '${{ parameters.dataproduct }}'

    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: '${{ steps.publish.output.repoContentsUrl }}'
        catalogInfoPath: '/catalog-info.yaml'

  output:
    links:
      - title: Repository
        url: '${{ steps.publish.output.remoteUrl }}'
      - title: Open in catalog
        icon: catalog
        entityRef: '${{ steps.register.output.entityRef }}'
